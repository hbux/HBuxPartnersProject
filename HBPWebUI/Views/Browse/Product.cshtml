@model HBPWebUI.Models.ProductViewModel
@{
    ViewData["Title"] = @Model.Product.Name;
}

<form asp-action="AddToBasket">
    <input type="hidden" asp-for="@Model.Product.Id" />
    <div class="container pb-5 border-bottom">
        <div class="row row-cols-1 row-cols-md-2">
            <div class="col">
                <div id="carouselExampleIndicators" class="carousel slide" data-bs-ride="carousel">
                    <div class="carousel-indicators">
                        <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="0" class="active" aria-current="true" aria-label="Slide 1"></button>
                        @for (int i = 1; i < Model.Product.Photos.Count; i++)
                        {
                            <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="@i" aria-label="Slide @i"></button> 
                        }
                    </div>
                    <div class="carousel-inner">
                        <div class="carousel-item active">
                            <img src="~/images/@Model.Product.Thumbnail.GetFullUri" class="d-block w-100" alt="...">
                        </div>
                        @for (int i = 1; i < Model.Product.Photos.Count; i++)
                        {
                            <div class="carousel-item">
                                <img src="~/images/@Model.Product.Photos[i].GetFullUri" class="d-block w-100" alt="...">
                            </div>
                        }
                    </div>
                        <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="prev">
                        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                        <span class="visually-hidden">Previous</span>
                    </button>
                        <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="next">
                        <span class="carousel-control-next-icon" aria-hidden="true"></span>
                        <span class="visually-hidden">Next</span>
                    </button>
                </div>
            </div>
            <div class="col">
                <h1 class="h4 mb-3 fw-normal">@Model.Product.Name</h1>
                <div class="py-1">
                    <h1 class="h3 mb-3 fw-bold">@Model.Product.RetailPrice.ToString("C2")</h1>
                </div>
                <div class="py-3 d-flex justify-content-between">
                    <a class="custom-link-to-accordion fw-normal text-black" href="#accordion">View delivery options</a>
                    <a class="custom-link-to-accordion fw-normal text-black" href="#accordion">View product information</a>
                </div>
                <div class="row py-3">
                    <div class="col-9 d-flex align-items-center">
                        <h1 class="h5 fw-bold m-0">Quantity:</h1>
                    </div>
                    <div class="col-3">
                        <input class="form-control" asp-for="Quantity" type="number" aria-label="default input example">
                    </div>
                </div>
                <div class="bg-light p-2 rounded text-center">
                    <p class="fw-bold m-0">@Model.Product.RetailPrice.ToString("C2")</p>
                    @if (Model.Product.IsInStock)
                    {
                        <p class="fw-normal m-0">Currently in stock online</p>
                    }
                    else
                    {
                        <p class="fw-normal m-0">Out of stock online</p>
                    }
                </div>
                @if (Model.Product.IsInStock)
                {
                    <div class="d-grid my-2">
                        <button type="submit" class="btn btn-primary btn-lg">Add to basket</button>
                    </div>
                }
                else
                {
                    <div class="alert alert-warning d-flex align-items-center my-2" role="alert">
                        <svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Warning:"><use xlink:href="#exclamation-triangle-fill"/></svg>
                        <div>
                        We're sorry, this item is out of stock.
                        </div>
                    </div>
                }
                @if (TempData["SuccessMessage"] != null)
                {
                    <div class="alert alert-success alert-dismissible fade show d-flex align-items-center" role="alert">
                        <svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Success:"><use xlink:href="#check-circle-fill"/></svg>
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        <div>
                        @TempData["SuccessMessage"]
                        </div>
                    </div>
                }
                <span class="text-danger text-center" asp-validation-for="@Model.Quantity"></span>
            </div>
        </div>
    </div>
    <div class="container w-100 mt-5" style="max-width: 625px;">
        <div class="accordion" id="accordion">
            <div class="accordion-item">
                <h2 class="accordion-header" id="headingOne">
                    <button class="accordion-button fw-bold" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                    Product description
                    </button>
                </h2>
                <div id="collapseOne" class="accordion-collapse collapse show" aria-labelledby="headingOne" data-bs-parent="#accordionExample">
                    <div class="accordion-body">
                    <strong>Product code: @Model.Product.Id</strong>
                    <p class="fw-normal">@Model.Product.Description</p>
                    </div>
                </div>
            </div>
            <div class="accordion-item">
                <h2 class="accordion-header" id="headingTwo">
                    <button class="accordion-button collapsed fw-bold" type="button" data-bs-toggle="collapse" data-bs-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
                    Product specification
                    </button>
                </h2>
                <div id="collapseTwo" class="accordion-collapse collapse" aria-labelledby="headingTwo" data-bs-parent="#accordionExample">
                    <div class="accordion-body">
                        <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
                    </div>
                </div>
            </div>
            <div class="accordion-item">
                <h2 class="accordion-header" id="headingThree">
                    <button class="accordion-button collapsed fw-bold" type="button" data-bs-toggle="collapse" data-bs-target="#collapseThree" aria-expanded="false" aria-controls="collapseThree">
                    Delivery information
                    </button>
                </h2>
                <div id="collapseThree" class="accordion-collapse collapse" aria-labelledby="headingThree" data-bs-parent="#accordionExample">
                    <div class="accordion-body">
                        <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
                    </div>
                </div>
            </div>
        </div>
    </div>
</form>

@section Breadcrumb {
    <li class="breadcrumb-item active" aria-current="page">@Model.Product.ShortName</li>
}

<script>
    $(document).ready(function(){
      // Add smooth scrolling to all links
      $(".custom-link-to-accordion").on('click', function(event) {

        // Make sure this.hash has a value before overriding default behavior
        if (this.hash !== "") {
          // Prevent default anchor click behavior
          event.preventDefault();

          // Store hash
          var hash = this.hash;

          // Using jQuery's animate() method to add smooth page scroll
          // The optional number (800) specifies the number of milliseconds it takes to scroll to the specified area
          $('html, body').animate({
            scrollTop: $(hash).offset().top
          }, 800, function(){

            // Add hash (#) to URL when done scrolling (default click behavior)
            window.location.hash = hash;
          });
        } // End if
      });
    });
</script>